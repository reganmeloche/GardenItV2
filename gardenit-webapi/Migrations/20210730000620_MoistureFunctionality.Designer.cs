// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using gardenit_webapi.Storage.EF;

namespace gardenit_webapi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210730000620_MoistureFunctionality")]
    partial class MoistureFunctionality
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("gardenit_webapi.Storage.EF.MoistureReading", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Plant")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReadDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("MoistureReading");
                });

            modelBuilder.Entity("gardenit_webapi.Storage.EF.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DaysBetweenWatering")
                        .HasColumnType("integer");

                    b.Property<bool>("HasDevice")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PollPeriodSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("gardenit_webapi.Storage.EF.Watering", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Seconds")
                        .HasColumnType("integer");

                    b.Property<DateTime>("WateringDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("Watering");
                });

            modelBuilder.Entity("gardenit_webapi.Storage.EF.MoistureReading", b =>
                {
                    b.HasOne("gardenit_webapi.Storage.EF.Plant", null)
                        .WithMany("MoistureReadings")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("gardenit_webapi.Storage.EF.Watering", b =>
                {
                    b.HasOne("gardenit_webapi.Storage.EF.Plant", "Plant")
                        .WithMany("Waterings")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("gardenit_webapi.Storage.EF.Plant", b =>
                {
                    b.Navigation("MoistureReadings");

                    b.Navigation("Waterings");
                });
#pragma warning restore 612, 618
        }
    }
}
